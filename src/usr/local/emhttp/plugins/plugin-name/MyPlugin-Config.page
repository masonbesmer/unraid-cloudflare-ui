Menu="Utilities"
Title="My New Plugin"
Icon="fa-question"
---
<?php
/**
 * This is an example plugin page that demonstrates how to create a settings page in the Unraid webUI.
 * The section above (before the ---) contains metadata that controls how this page appears in the Unraid interface:
 * - Menu: Determines which navigation menu this page appears under
 * - Title: The text shown in the navigation menu and page header
 * - Icon: The Font Awesome icon shown next to the menu item
 */

// Load required Unraid helper functions for plugin development
require_once "/usr/local/emhttp/plugins/dynamix/include/Helpers.php";
require_once "/usr/local/emhttp/plugins/dynamix/include/Wrappers.php";

// Load plugin settings from the config file into $cfg array
// The user config file is stored in /boot/config/plugins/my-plugin/my-plugin.cfg
// You can also provide /usr/local/emhttp/plugins/my-plugin/default.cfg which contains
// default values that are used when settings are missing from the user config
// or when the user config file does not exist
$cfg = parse_plugin_cfg("my-plugin");
?>

<!-- Load required JavaScript and CSS for the file picker component -->
<script src="<?= autov('/webGui/javascript/jquery.filetree.js'); ?>"></script>
<link type="text/css" rel="stylesheet" href="<?= autov('/webGui/styles/jquery.filetree.css'); ?>">
<script>
    $(function() {
        // Initialize the file picker using the attributes set in the input field
        // This enables folder browsing and file selection functionality
        $('#filepicker').fileTreeAttach();
    });
</script>

<!--
    Basic configuration form:
    - The form POSTs to /update.php which handles saving settings
    - Settings are saved to the INI file specified in the hidden #file input
    - Use htmlspecialchars() to sanitize any user input for security
    - The markdown="1" attribute enables Markdown parsing in the form
-->
<form method="POST" action="/update.php" target="progressFrame" markdown="1">
<input type="hidden" name="#file" value="my-plugin/my-plugin.cfg">

<!-- Basic text input example - uses htmlspecialchars to prevent XSS -->
_(Text Input)_:
: <input type="text" name="TEXT_VALUE" value="<?= htmlspecialchars($cfg['TEXT_VALUE']); ?>">

> This is the help text displayed if you click on the name of the setting.
> It can span multiple lines and supports markdown formatting.

<!-- Dropdown/select input with multiple options -->
_(Select Input)_:
: <select name="SELECTABLE_VALUE" size="1" class="narrow">
    <option value="option1" <?= ($cfg['SELECTABLE_VALUE'] ?? "") == 'option1' ? 'selected' : ''; ?>>Option 1</option>
    <option value="option2" <?= ($cfg['SELECTABLE_VALUE'] ?? "") == 'option2' ? 'selected' : ''; ?>>Option 2</option>
    <option value="option3" <?= ($cfg['SELECTABLE_VALUE'] ?? "") == 'option3' ? 'selected' : ''; ?>>Option 3</option>
  </select>

<!-- File picker input with folder selection enabled and root set to /mnt -->
_(File Chooser)_:
: <input type="text" id="filepicker" name="FILE_PICKER" autocomplete="off" spellcheck="false" class="narrow"
        data-pickfolders="true" data-pickfilter="HIDE_FILES_FILTER" data-pickroot="/mnt" pattern="^[^\\]*/$"
        value="<?= htmlspecialchars($cfg['FILE_PICKER']); ?>">

<!-- Form action buttons - Apply saves changes, Done returns to previous page -->
&nbsp;
: <span class="buttons-spaced">
    <input type="submit" value="_(Apply)_">
    <input type="button" value="_(Done)_" onclick="done()">
  </span>

</form>